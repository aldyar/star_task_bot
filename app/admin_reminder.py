from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.states import Reminder as ReminderState
import re
from app.database.requests import (get_config, edit_ref_text, edit_ref_reward, edit_start_text,return_start_text, 
                                   set_image_url, delete_image_url,get_image_url)
from app.database.reminder_req import ReminderFunction as Reminder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN
import os
IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)
from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.utils.text_decorations import html_decoration
from app.database.user_req import UserFunction as User
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
import asyncio


admin = Router()

class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(), F.text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def reminder_handler(message:Message):
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:*',parse_mode='Markdown',reply_markup=kb.inline_admin_reminder)


@admin.callback_query(F.data == 'ResetTextReminder')
async def reset_reminder_text_handler(callback:CallbackQuery):
    text = await Reminder.get_config_reminder_text()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='EditReminderText')]])
    if text:
        await callback.message.answer('–í–∞—à —Ç–µ–∫—Å—Ç:\n\n'
                                      f'{text}',parse_mode='HTML',reply_markup=keyboard)
    else:
        await callback.message.answer('–í–∞—à —Ç–µ–∫—Å—Ç:\n\n'
                                      f'–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞',parse_mode='HTML',reply_markup=keyboard)
    await callback.message.delete()
        

@admin.callback_query(F.data == 'EditReminderText')
async def edit_reminder_text_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:')
    await state.set_state(ReminderState.wait_text)
    await callback.message.delete()


@admin.message(ReminderState.wait_text)
async def wait_text_handler(message:Message,state:FSMContext):
    text_with_html = html_decoration.unparse(message.text, message.entities)
    await state.update_data(text=text_with_html)
    await preview(message, state)


async def preview(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='SaveReminderText')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='CancelReminderText')]
    ])
    await message.answer(text,parse_mode='HTML',  reply_markup=keyboard)


@admin.callback_query(F.data == 'SaveReminderText')
async def save_changes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    await Reminder.set_reminder_text(text)
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ')


@admin.callback_query(F.data == 'CancelReminderText')
async def cancel_changes(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùå')


@admin.callback_query(F.data == 'ResetImageReminder')
async def reset_image_reminder_handler(callback:CallbackQuery):
    image_path = await Reminder.get_config_reminder_image()  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data='DeleteImageReminder')],
        [InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É',callback_data='EditImageReminder')]
    ])
    if image_path and os.path.exists(image_path):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(photo, caption="*–í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞*",parse_mode='Markdown', reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏.", reply_markup=keyboard)

    await callback.message.delete()


@admin.callback_query(F.data == 'EditImageReminder')
async def new_image_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.delete()
    await callback.message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É:*',parse_mode='Markdown')
    await state.set_state(ReminderState.wait_image)


@admin.message(ReminderState.wait_image, F.photo)
async def receive_image(message: Message, state: FSMContext, bot: Bot):
    try:
        print("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        photo = message.photo[-1]
        print(f"Photo ID: {photo.file_id}")
        
        file_info = await bot.get_file(photo.file_id)
        print(f"File info: {file_info}")
        file_path = file_info.file_path
        print(f"File path: {file_path}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        local_filename = os.path.join(IMAGE_DIR, "image_reminder.jpg")
        print(f"Saving image to: {local_filename}")
        await bot.download_file(file_path, local_filename)
        print("Image successfully saved")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        image_url = f"{local_filename}"  # –ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É URL
        print(f"Saving to DB: {image_url}")
        await Reminder.set_reminder_image(image_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        print("Image URL saved to database")
        
        await state.clear()
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")



@admin.callback_query(F.data == 'DeleteImageReminder')
async def delete_image(callback: CallbackQuery):
    image_path = await Reminder.get_config_reminder_image()  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    print(f"–î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {image_path}")

    if image_path:
        image_path = os.path.normpath(image_path)
        print(f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {image_path}")

    if image_path and os.path.exists(image_path):
        os.remove(image_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        await Reminder.delete_image()  # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
        await callback.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        await callback.message.delete()

    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    await callback.answer()


@admin.callback_query(Admin(),F.data == 'SendReminder')
async def send_reminder(callback:CallbackQuery, bot: Bot):
    await callback.answer()
    users = await User.get_all_users()
    user_ids = [user.tg_id for user in users]
    text = await Reminder.get_config_reminder_text()
    image_url = await Reminder.get_config_reminder_image()        
    total_users = len(user_ids)
    success_count = 0
    blocked_count = 0
    failed_count = 0

    await callback.message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")

    for user_id in user_ids:
        try:
            if image_url:
                photo = FSInputFile(image_url)
                await bot.send_photo(
                    user_id,
                    photo=photo,
                    caption=text,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    user_id,
                    text,
                    parse_mode="HTML"
                )
            success_count += 1
        except TelegramForbiddenError:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            blocked_count += 1
        except TelegramAPIError as e:  # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            failed_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
        
        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì¨ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {failed_count}"
    )