from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
import re
from app.database.requests import (get_config, edit_ref_text, edit_ref_reward, edit_start_text,return_start_text, 
                                   set_image_url, delete_image_url,get_image_url)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN
from aiogram import Bot
import os
# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_DIR = "images"
os.makedirs(IMAGE_DIR, exist_ok=True)
from aiogram.types import FSInputFile
from aiogram.utils.text_decorations import html_decoration
from app.database.channel_req import StartChannelFunction as Channel
from app.states import StartChannel

admin = Router()

class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

"""@admin.message(Admin(),F.text == '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
async def start_setting(message: Message,state:FSMContext):
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:*',parse_mode='Markdown')"""

from aiogram.fsm.state import StatesGroup, State

class AdminState(StatesGroup):
    waiting_for_text = State()
    waiting_for_image = State()

@admin.message(Admin(), F.text == '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
async def start_setting(message: Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='editstarttext')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data='editimage')],
        [InlineKeyboardButton(text = '–ö–∞–Ω–∞–ª—ã',callback_data='StartChannel')]
    ])
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:*', parse_mode='Markdown', reply_markup=keyboard)


@admin.callback_query(F.data == 'editstarttext')
async def edit_text(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç', callback_data='reset_text')]
    ])
    await state.set_state(AdminState.waiting_for_text)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', reply_markup=keyboard)
    await callback.message.delete()



@admin.callback_query(F.data == 'reset_text')
async def reset_text_handler(callback:CallbackQuery):
    await return_start_text()
    await callback.message.answer('*–ü–µ—Ä–≤–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*',parse_mode='Markdown')
    await callback.message.delete()



@admin.message(AdminState.waiting_for_text, F.text)
async def receive_text(message: Message, state: FSMContext):
    text_with_html = html_decoration.unparse(message.text, message.entities)
    await state.update_data(text=text_with_html)
    print(message.text)
    await preview(message, state)


async def preview(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')]
    ])
    await message.answer(text,parse_mode='HTML',  reply_markup=keyboard)


@admin.callback_query(F.data == 'save')
async def save_changes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    await edit_start_text(text)
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ')


@admin.callback_query(F.data == 'cancel')
async def cancel_changes(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùå')






@admin.callback_query(F.data == 'editimage')
async def edit_image(callback: CallbackQuery, state: FSMContext):
    image_path = await get_image_url()  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data='delete_image')],
        [InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É',callback_data='processeditimage')]
    ])
    if image_path and os.path.exists(image_path):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(photo, caption="*–í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞*",parse_mode='Markdown', reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏.", reply_markup=keyboard)

    await callback.message.delete()


@admin.callback_query(F.data == 'processeditimage')
async def new_image_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.delete()
    await callback.message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É:*',parse_mode='Markdown')
    await state.set_state(AdminState.waiting_for_image)

@admin.message(AdminState.waiting_for_image, F.photo)
async def receive_image(message: Message, state: FSMContext, bot: Bot):
    try:
        print("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        photo = message.photo[-1]
        print(f"Photo ID: {photo.file_id}")
        
        file_info = await bot.get_file(photo.file_id)
        print(f"File info: {file_info}")
        file_path = file_info.file_path
        print(f"File path: {file_path}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        local_filename = os.path.join(IMAGE_DIR, "image.jpg")
        print(f"Saving image to: {local_filename}")
        await bot.download_file(file_path, local_filename)
        print("Image successfully saved")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        image_url = f"{local_filename}"  # –ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É URL
        print(f"Saving to DB: {image_url}")
        await set_image_url(image_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        print("Image URL saved to database")
        
        await state.clear()
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")



@admin.callback_query(F.data == 'delete_image')
async def delete_image(callback: CallbackQuery):
    image_path = await get_image_url()  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    print(f"–î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {image_path}")

    if image_path:
        image_path = os.path.normpath(image_path)
        print(f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {image_path}")

    if image_path and os.path.exists(image_path):
        os.remove(image_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        await delete_image_url()  # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
        await callback.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        await callback.message.delete()

    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    await callback.answer()


@admin.callback_query(F.data == 'StartChannel')
async def start_channel_handler(callback:CallbackQuery):
    channels = await Channel.get_channels()
    await callback.message.delete()
    if channels == False:
        text = "*–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª*"
        
        return await callback.message.answer(text,parse_mode='Markdown',reply_markup=kb.inline_admin_start_channel)
    
    text = "*üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:*\n\n"
    for i, channel in enumerate(channels, start=1):
        text += f"{i}. {channel.title}\n"
    await callback.message.answer(text,parse_mode='Markdown',reply_markup=kb.inline_admin_start_channel)


@admin.callback_query(F.data == 'AddStartChannel')
async def add_start_channel_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.answer(
        "üìå –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/...`", parse_mode='Markdown', disable_web_page_preview=True)
    await callback.answer()
    await state.set_state(StartChannel.link)


@admin.message(StartChannel.link)
async def wait_link_handler(message:Message,state:FSMContext):
    link = message.text.strip()
    await state.update_data(link=link)
    await message.answer('*–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞*',parse_mode='Markdown')
    await state.set_state(StartChannel.chat_id)


@admin.message(StartChannel.chat_id)
async def wait_for_chat_id(message:Message,state:FSMContext,bot:Bot):
    if message.forward_from_chat:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        data = await state.get_data()
        link = data['link'] 
        chat_id = message.forward_from_chat.id
        title =  message.forward_from_chat.title
        admin = await Channel.is_bot_admin(bot,chat_id)
        if not admin:
            return await message.answer('*–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤*\n\n'
            '*–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*', parse_mode='Markdown')
        await Channel.set_channels(chat_id,title,link)
        await message.answer('*‚úÖ–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown')
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")


@admin.callback_query(F.data == 'DeleteStartChannel')
async def delete_channel_handler(callback:CallbackQuery,state:FSMContext):
    channels = await Channel.get_channels()
    if channels == False:
        return await callback.answer('–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ')
    text = '*üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å*'
    buttons = [
        [InlineKeyboardButton(text=channel.title, callback_data=f"StartChannel_{channel.id}")]
        for channel in channels
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(text, reply_markup=markup, parse_mode="Markdown")
    await callback.message.delete()


@admin.callback_query(F.data.startswith('StartChannel_'))
async def delete_channel_process_handler(callback:CallbackQuery):
    id = callback.data.removeprefix("StartChannel_")
    await Channel.delete_channel(id)
    await callback.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    await callback.message.delete()
    
