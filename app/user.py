from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from app.states import Chat, Image
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
#from app.generators import gpt_text, gpt_image
from app.database.requests import set_user, get_config, get_bonus_update, update_bonus, check_tasks
from aiogram.enums import ChatAction
from aiogram import Bot
import random
from datetime import datetime, timedelta

user = Router()


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    emoji, captcha = random.choice(kb.captchas)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–ø—á—É
    text = ("ü§ñ <b>–ö–∞–ø—á–∞</b>\n\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/testtt1143'>–∫–∞–Ω–∞–ª</a>\n\n"
        f"2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ {emoji} –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–≤—ë–∑–¥—ã, "
        "–ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ 1‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞:")
    await message.answer(text, reply_markup=captcha, parse_mode="HTML", disable_web_page_preview=True)


@user.message(F.text == 'üéØ–ó–∞–¥–∞–Ω–∏—è')
async def get_task(message: Message):
    tasks = await check_tasks(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    if not tasks:
        await message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return

    task = tasks[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

    text = (
        f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!</b>\n\n"
        f"‚Ä¢<b> –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{task.link}'>{task.link}</a></b>\n"
        f"‚Ä¢<b> –ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê</b>"
    )

    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)


@user.message(F.text == 'üíé–ë–æ–Ω—É—Å')
async def bonus(message: Message):
    bonus = await get_config('bonus_amount')
    data = await get_bonus_update(message.from_user.id)
    now = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    if data is None or (now - data) >= timedelta(hours=24):
        text = (
            f'üåü *–ë–æ–Ω—É—Å –≤ —Ä–∞–∑   –º–µ—Ä–µ {bonus}*‚≠êÔ∏è *–Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ*.\n\n'

        '‚Ä¢ *–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.*'
        )
        await update_bonus(message.from_user.id, now,bonus)
    else: 
        remaining_time = timedelta(hours=24) - (now - data)
        hours, seconds = divmod(remaining_time.total_seconds(), 3600)
        minutes, _ = divmod(seconds, 60)
        
        text = (
            '‚ùå *–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ!*\n'
            f'üí° *–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(hours)}—á {int(minutes)}–º.*'
        )
    await message.answer(text,parse_mode='Markdown')

@user.callback_query(F.data == 'accsess')
async def success_callback(callback: CallbackQuery):
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
    await callback.message.delete()
    user = await callback.bot.get_chat(callback.from_user.id)
    username = user.username 
    await set_user(callback.from_user.id, username)

    text =   (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n"
        "–í –Ω–∞—à–µ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã, –º—ã –≤—ã–≤–µ–ª–∏ —É–∂–µ –±–æ–ª–µ–µ *250 —Ç—ã—Å—è—á –∑–≤—ë–∑–¥*, –ø–æ—Å–º–æ—Ç—Ä–∏ ‚Äì\n"
        "[üîó https://t.me/testtt1143](https://t.me/testtt1143)\n\n"
        "üéÅ *–ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ, –¥–∞—Ä–∏–º —Ç–µ–±–µ –ø–µ—Ä–≤—É—é* `1‚≠ê`, *–ø–æ–ª—É—á–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ —ç—Ç–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:*\n"
        "‚Ä¢ üéØ *–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è*\n"
        "‚Ä¢ üíé *–ó–∞–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n"
        "‚Ä¢ üë• *–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π –ø–æ* `1.25‚≠ê` *–∑–∞ –∫–∞–∂–¥–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–≥—É:*\n"
        "[üîó t.me/starfall_tg_bot?start=NjcxMjEwNTk1NQ](https://t.me/starfall_tg_bot?start=NjcxMjEwNTk1NQ)\n\n"
        "*–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å –º–∏–Ω–∏–º—É–º* `15‚≠ê`, *–≤—ã–≤–æ–¥–∏ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ* ¬´üí∞ *–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã*¬ª, *–º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, —É–¥–∞—á–∏!*\n\n"
        "üí¨ *–ù–∞—à —á–∞—Ç:* [@fschatf](https://t.me/testtt1143)\n\n")
    await callback.message.answer(text,parse_mode="Markdown", reply_markup=kb.main, disable_web_page_preview=True)
    await callback.message.answer(' *üéØ–í—ã–ø–æ–ª–Ω—è–π –ª—ë–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ª—É—Ç–∞–π —Ö–∞–ª—è–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã:*',parse_mode="Markdown", reply_markup=kb.task_inline)


@user.message(F.text == '‚≠êÔ∏è–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã')
async def ref_system(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/FreeStard_bot?start={user_id}"
    text = (
    "*–ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π –ø–æ 2*‚≠ê, *–∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø—Ä–æ–π–¥—É—Ç –∫–∞–ø—á—É!*\n\n"
    "*–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:*\n"
    f"[{referral_link}]({referral_link})\n\n"
    "‚ùì *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É?*\n"
    "\n"
    "‚Ä¢ *–û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è* üë•\n"
    "‚Ä¢ *–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ* üì¢\n"
    "‚Ä¢ *–û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö* üí¨\n"
    "‚Ä¢ *–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö* üåê\n"
    "\n\n"
    "üó£ *–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:* 0"
)



    await message.answer(text, disable_web_page_preview=True, parse_mode='Markdown')



@user.callback_query(F.data == 'void')
async def fail_callback(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")
    await callback.message.delete()




@user.message(F.text == 'test')
async def get_username(message: Message,bot: Bot):
    user = await message.bot.get_chat(message.from_user.id)
    username = user.username if user.username else "–£ –≤–∞—Å –Ω–µ—Ç username"
    await message.answer(f"–í–∞—à username: @{username}")
