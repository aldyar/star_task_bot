from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
<<<<<<< HEAD
from app.database.requests import set_user, get_config, get_bonus_update, update_bonus, check_tasks, get_user, get_withdraw_limit, set_referrer_id
=======
from app.database.requests import set_user, get_config, get_bonus_update, update_bonus, check_tasks, get_user, get_withdraw_limit, set_referrer_id, create_transaction
>>>>>>> 0845efb (–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç)
from app.keyboards import withdraw_inline, withdraw_keyboard
from aiogram.enums import ChatAction
from aiogram import Bot
import random
from datetime import datetime, timedelta
import text as txt
user = Router()
from config import ADMIN
from app.admin import start_admin
import uuid

@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await success_message(message)
        return
    

    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split(maxsplit=1)[1])
        await state.update_data(referrer_id=referrer_id)
    emoji, captcha = random.choice(kb.captchas)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–ø—á—É
    text = ("ü§ñ <b>–ö–∞–ø—á–∞</b>\n\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/testtt1143'>–∫–∞–Ω–∞–ª</a>\n\n"
        f"2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ {emoji} –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–≤—ë–∑–¥—ã, "
        "–ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ 1‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞:")
    await message.answer(text, reply_markup=captcha, parse_mode="HTML", disable_web_page_preview=True)


async def success_message(message: Message):
    start = await get_config('start_text')
    await message.answer(start,parse_mode="Markdown", reply_markup=kb.main, disable_web_page_preview=True)
    await message.answer(' *üéØ–í—ã–ø–æ–ª–Ω—è–π –ª—ë–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ª—É—Ç–∞–π —Ö–∞–ª—è–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã:*',parse_mode="Markdown", reply_markup=kb.task_inline)


@user.message(F.text == 'üéØ–ó–∞–¥–∞–Ω–∏—è')
async def get_task(message: Message):
    tasks = await check_tasks(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    if not tasks:
        await message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return

    task = tasks[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

    text = (
        f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!</b>\n\n"
        f"‚Ä¢<b> –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{task.link}'>{task.link}</a></b>\n"
        f"‚Ä¢<b> –ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê</b>"
    )

    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)


@user.message(F.text == 'üíé–ë–æ–Ω—É—Å')
async def bonus(message: Message):
    bonus = await get_config('bonus_amount')
    data = await get_bonus_update(message.from_user.id)
    now = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    if data is None or (now - data) >= timedelta(hours=24):
        text = (
            f'üåü *–ë–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus}*‚≠êÔ∏è *–Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ*.\n\n'

        '‚Ä¢ *–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.*'
        )
        await update_bonus(message.from_user.id, now,bonus)
    else: 
        remaining_time = timedelta(hours=24) - (now - data)
        hours, seconds = divmod(remaining_time.total_seconds(), 3600)
        minutes, _ = divmod(seconds, 60)
        
        text = (
            '‚ùå *–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ!*\n'
            f'üí° *–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(hours)}—á {int(minutes)}–º.*'
        )
    await message.answer(text,parse_mode='Markdown')

@user.callback_query(F.data == 'accsess')
async def success_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    referrer_id = data.get("referrer_id")
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
    await callback.message.delete()
    user = await callback.bot.get_chat(callback.from_user.id)
    username = user.username 
    await set_user(callback.from_user.id, username, referrer_id)
    start = await get_config('start_text')
    await callback.message.answer(start,parse_mode="Markdown", reply_markup=kb.main, disable_web_page_preview=True)
    await callback.message.answer(' *üéØ–í—ã–ø–æ–ª–Ω—è–π –ª—ë–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ª—É—Ç–∞–π —Ö–∞–ª—è–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã:*',parse_mode="Markdown", reply_markup=kb.task_inline)


@user.message(F.text == '‚≠êÔ∏è–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã')
async def ref_system(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/FreeStard_bot?start={user_id}"
    change_text = await get_config('ref_text')
    user = await get_user(user_id)
    text = (
    f'{change_text}\n\n'
    "*–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:*\n"
    f"`{referral_link}`\n\n"
    "‚ùì *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É?*\n"
    "\n"
    "‚Ä¢ *–û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è* üë•\n"
    "‚Ä¢ *–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ* üì¢\n"
    "‚Ä¢ *–û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö* üí¨\n"
    "‚Ä¢ *–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö* üåê\n"
    "\n\n"
    f"üó£ *–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:* {user.referral_count}"
)



    await message.answer(text, disable_web_page_preview=True, parse_mode='Markdown')


@user.message(F.text == 'üéÅ–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã')
async def withdraw(message:Message):
    user = await get_user(message.from_user.id)
    keyboard = await withdraw_keyboard()
    text = (
        f"*–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.balance}‚≠êÔ∏è*\n\n"
        '*üîª –í—ã–±–µ—Ä–∏, –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:*'
    )
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)



@user.callback_query(lambda c: c.data and c.data.startswith("withdraw_"))
<<<<<<< HEAD
async def handle_withdraw_callback(callback: CallbackQuery):
=======
async def handle_withdraw_callback(callback: CallbackQuery, bot: Bot):
>>>>>>> 0845efb (–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç)
    value = int(callback.data.removeprefix("withdraw_")) 
    user = await get_user(callback.from_user.id)
    if user.balance >= value:  
        text = (
    f"*‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {value}‚≠ê —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
    "*–í —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫,* "
    "*–∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–≤—ë–∑–¥—ã.*\n\n"
    "*–°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –≤—ã–≤–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:* [https://t.me/stoutput](https://t.me/stoutput)\n\n"
    "_–ù–µ –º–µ–Ω—è–π—Ç–µ @username, –∏–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!_"
)
<<<<<<< HEAD
        await callback.message.answer(text, parse_mode='Markdown', disable_web_page_preview=True)
        await callback.message.delete()
=======
        message_text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî TG ID: {user.tg_id}\n"
        f"üí∞ –°—É–º–º–∞: {value} ‚≠ê\n"
        f"‚ö° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å."
    )

        await create_transaction(callback.from_user.id, value)
        await callback.message.answer(text, parse_mode='Markdown', disable_web_page_preview=True)
        await callback.message.delete()
        for admin_id in ADMIN:
            await bot.send_message(admin_id, message_text)
>>>>>>> 0845efb (–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç)
    else:
        await callback.answer('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç',show_alert=True)


<<<<<<< HEAD
=======
async def notify_admin_new_withdrawal(bot:Bot, tg_id: int, username: str, amount: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥."""
    message_text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî TG ID: {tg_id}\n"
        f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        f"‚ö° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å."
    )

    try:
        await bot.send_message(ADMIN, message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


>>>>>>> 0845efb (–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç)
@user.callback_query(F.data == 'void')
async def fail_callback(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")
    await callback.message.delete()


<<<<<<< HEAD


@user.message(F.text == 'test')
async def get_username(message: Message,bot: Bot):
    user = await message.bot.get_chat(message.from_user.id)
    username = user.username if user.username else "–£ –≤–∞—Å –Ω–µ—Ç username"
    await message.answer(f"–í–∞—à username: @{username}")
=======
>>>>>>> 0845efb (–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç)
