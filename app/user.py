from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.database.requests import (set_user, get_config, get_bonus_update, update_bonus, check_tasks, get_user, 
                                   get_withdraw_limit, set_referrer_id, create_transaction, get_task,
                                   is_user_subscribed,completed_task,create_task_completions_history,check_subscriptions,
                                   check_user,insert_message_id, count_reward,join_request,skip_task,get_task_about_taskid)
from app.database.task_req import get_first_available_task,skip_task_function,create_task_state,get_task_state,create_task_history,check_entry_task_history
from app.keyboards import withdraw_inline, withdraw_keyboard
from aiogram.enums import ChatAction
from aiogram import Bot
import random
from datetime import datetime, timedelta
import text as txt
user = Router()
from config import ADMIN, GROUP_ID,CHANNEL_ID
from app.admin import start_admin
from aiogram import types
from aiogram.types import FSInputFile



@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await success_message(message)
        return
    

    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split(maxsplit=1)[1])
        await state.update_data(referrer_id=referrer_id)
    emoji, captcha = random.choice(kb.captchas)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–ø—á—É
    text = ("ü§ñ <b>–ö–∞–ø—á–∞</b>\n\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/FreeStard'>–∫–∞–Ω–∞–ª</a>\n\n"
        f"2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ {emoji} –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–≤—ë–∑–¥—ã, "
        "–ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ 1‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞:")
    await message.answer(text, reply_markup=captcha, parse_mode="HTML", disable_web_page_preview=True)


async def success_message(message: Message):
    text = await get_config('start_text')
    image_url = await get_config('image_link')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ


    user_id = message.from_user.id
    formatted_text = text.format(user_id=user_id)

    if image_url:
        photo = FSInputFile(image_url)
        await message.answer_photo(photo, caption=formatted_text, parse_mode="Markdown", reply_markup=kb.main)
    else:
        await message.answer(formatted_text, parse_mode="Markdown", reply_markup=kb.main,disable_web_page_preview=True)
    await message.answer(' *üéØ–í—ã–ø–æ–ª–Ω—è–π –ª—ë–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ª—É—Ç–∞–π —Ö–∞–ª—è–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã:*',parse_mode="Markdown", reply_markup=kb.task_inline)



@user.message(F.text == 'üéØ–ó–∞–¥–∞–Ω–∏—è')
async def get_task_hander(message: Message,state: FSMContext):
    task = await get_first_available_task(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    if not task:
        await message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return
    if task.type == 'subscribe':
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"

        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        reward = await count_reward(message.from_user.id)
        await message.answer(f'*üëë –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏* *{reward}‚≠êÔ∏è!*\n\n'
                            '*üîª –í—ã–ø–æ–ª–Ω–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ:*', parse_mode='Markdown')
        keyboard = await kb.complete_task_inline(task.link)
        await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
    elif task.type == 'entry':
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"
        
        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        await create_task_state(message.from_user.id,task.id)
        reward = await count_reward(message.from_user.id)
        await message.answer(f'*üëë –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏* *{reward}‚≠êÔ∏è!*\n\n'
                            '*üîª –í—ã–ø–æ–ª–Ω–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ:*', parse_mode='Markdown')
        keyboard = await kb.entry_type_inline(task.link)
        await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)



@user.callback_query(F.data == 'skip')
async def skip_task_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    task_present = data.get("task")
    task = await skip_task_function(callback.from_user.id,task_present.id)
    if not task:
        await callback.message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return
    if task.type == 'subscribe':
    
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"

        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        keyboard = await kb.complete_task_inline(task.link)
        await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
    elif task.type == 'entry':
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"
        
        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        await create_task_state(callback.from_user.id,task.id)
        keyboard = await kb.entry_type_inline(task.link)
        await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)



@user.callback_query(F.data == 'complete_task')
async def complete_task_handler(callback:CallbackQuery,bot:Bot,state:FSMContext):
    data = await state.get_data()
    task_present = data.get("task")
    
    chat_id = task_present.chat_id
    is_subscribed  = await is_user_subscribed(bot,callback.from_user.id,chat_id)
    if is_subscribed :
        copmpleted = await completed_task(task_present.id, callback.from_user.id, task_present.reward)
        complete_text = (
                f'*‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_present.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n'
                f'*‚Ä¢ {task_present.reward}‚≠êÔ∏è –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ, –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π, –∏–Ω–∞—á–µ –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã!!*'
                )
        await callback.message.answer(complete_text,parse_mode='Markdown')
        if copmpleted:
            message_text = (f'üéØ*–ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º  ‚Ññ*{task_present.id} *–∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É*\n\n'
                            f'‚Ä¢ *–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ:* [{task_present.link}]({task_present.link})\n'
                            f'‚Ä¢ *–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:* {task_present.completed_count+1}')
            for admin_id in ADMIN:
                await bot.send_message(admin_id, message_text,parse_mode='Markdown', disable_web_page_preview=True)
        await callback.answer('‚≠ê–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–æ')
        await create_task_completions_history(callback.from_user.id,task_present.id)
        await callback.message.delete()
        task = await get_first_available_task(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        await state.update_data(task = task)

        if not task:
            await callback.message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
            return



        if task.type == 'subscribe':
    
            text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"

            if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                text += f"{task.description}\n\n"

            text += f"‚Ä¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞* [{task.link}]({task.link})\n"
            text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
            keyboard = await kb.complete_task_inline(task.link)
            await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
        elif task.type == 'entry':
            text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"
        
            if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                text += f"{task.description}\n\n"

            text += f"‚Ä¢ *–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª* [{task.link}]({task.link})\n"
            text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
            await create_task_state(callback.from_user.id,task.id)
            keyboard = await kb.entry_type_inline(task.link)
            await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)





@user.message(F.text == 'üíé–ë–æ–Ω—É—Å')
async def bonus(message: Message):
    bonus = await get_config('bonus_amount')
    data = await get_bonus_update(message.from_user.id)
    now = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    if data is None or (now - data) >= timedelta(hours=24):
        text = (
            f'üåü *–ë–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus}*‚≠êÔ∏è *–Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ*.\n\n'

        '‚Ä¢ *–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.*'
        )
        await update_bonus(message.from_user.id, now,bonus)
    else: 
        remaining_time = timedelta(hours=24) - (now - data)
        hours, seconds = divmod(remaining_time.total_seconds(), 3600)
        minutes, _ = divmod(seconds, 60)
        
        text = (
            '‚ùå *–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ!*\n'
            f'üí° *–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(hours)}—á {int(minutes)}–º.*'
        )
    await message.answer(text,parse_mode='Markdown')


@user.callback_query(F.data == 'accsess')
async def success_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    subscribed = await is_user_subscribed(bot,callback.from_user.id,CHANNEL_ID)
    if subscribed:
        data = await state.get_data()
        referrer_id = data.get("referrer_id")
        await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        await callback.message.delete()
        user = await callback.bot.get_chat(callback.from_user.id)
        username = user.username 
        await set_user(callback.from_user.id, username, referrer_id)
        text = await get_config('start_text')
        user_id = callback.from_user.id
        formatted_text = text.format(user_id=user_id)
        await callback.message.answer(formatted_text,parse_mode="Markdown", reply_markup=kb.main, disable_web_page_preview=True)
        await callback.message.answer(' *üéØ–í—ã–ø–æ–ª–Ω—è–π –ª—ë–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ª—É—Ç–∞–π —Ö–∞–ª—è–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã:*',parse_mode="Markdown", reply_markup=kb.task_inline)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",show_alert=True)



@user.callback_query(F.data == 'task')
async def task_handler(callback:CallbackQuery, state:FSMContext):
    task = await get_first_available_task(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    if not task:
        await callback.message.answer('–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return
    if task.type == 'subscribe':
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"

        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        reward = await count_reward(callback.from_user.id)
        await callback.message.answer(f'*üëë –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏* *{reward}‚≠êÔ∏è!*\n\n'
                            '*üîª –í—ã–ø–æ–ª–Ω–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ:*', parse_mode='Markdown')
        keyboard = await kb.complete_task_inline(task.link)
        await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
    elif task.type == 'entry':
        text = f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}!*\n\n"
        
        if task.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            text += f"{task.description}\n\n"

        text += f"‚Ä¢ *–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª* [{task.link}]({task.link})\n"
        text += f"‚Ä¢ *–ù–∞–≥—Ä–∞–¥–∞: {task.reward}‚≠ê*"
        await state.update_data(task = task)
        await create_task_state(callback.from_user.id,task.id)
        reward = await count_reward(callback.from_user.id)
        await callback.message.answer(f'*üëë –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏* *{reward}‚≠êÔ∏è!*\n\n'
                            '*üîª –í—ã–ø–æ–ª–Ω–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ:*', parse_mode='Markdown')
        keyboard = await kb.entry_type_inline(task.link)
        await callback.message.answer(text, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=keyboard)
    await callback.answer()



@user.message(F.text == '‚≠êÔ∏è–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã')
async def ref_system(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/FreeStard_bot?start={user_id}"
    change_text = await get_config('ref_text')
    user = await get_user(user_id)
    text = (
    f'{change_text}\n\n'
    "*–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:*\n"
    f"`{referral_link}`\n\n"
    "‚ùì *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É?*\n"
    "\n"
    "‚Ä¢ *–û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è* üë•\n"
    "‚Ä¢ *–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ* üì¢\n"
    "‚Ä¢ *–û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö* üí¨\n"
    "‚Ä¢ *–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö* üåê\n"
    "\n\n"
    f"üó£ *–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:* {user.referral_count}"
)



    await message.answer(text, disable_web_page_preview=True, parse_mode='Markdown')


@user.message(F.text == 'üéÅ–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã')
async def withdraw(message:Message):
    user = await get_user(message.from_user.id)
    keyboard = await withdraw_keyboard()
    text = (
        f"*–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.balance}‚≠êÔ∏è*\n\n"
        '*üîª –í—ã–±–µ—Ä–∏, –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:*'
    )
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)



@user.callback_query(lambda c: c.data and c.data.startswith("withdraw_"))
async def handle_withdraw_callback(callback: CallbackQuery, bot: Bot):
    value = int(callback.data.removeprefix("withdraw_")) 
    user = await get_user(callback.from_user.id)
    if user.balance >= value:  
        text = (
    f"*‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {value}‚≠ê —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
    "*–í —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫,* "
    "*–∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–≤—ë–∑–¥—ã.*\n\n"
    "*–°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –≤—ã–≤–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:* [https://t.me/vyvod_star](https://t.me/vyvod_star)\n\n"
    "_–ù–µ –º–µ–Ω—è–π—Ç–µ @username, –∏–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!_"
)
        message_text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî TG ID: {user.tg_id}\n"
        f"üí∞ –°—É–º–º–∞: {value} ‚≠ê\n"
        f"‚ö° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å."
    )

        transaction = await create_transaction(callback.from_user.id, value)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        group_message = (
            f"*‚è≥ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{transaction.id} –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ {value}‚≠ê* "
            f"*–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *[{user.username}](http://t.me/{user.username})"
        )

        await callback.message.answer(text, parse_mode='Markdown', disable_web_page_preview=True)
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        #GROUP_ID = -1002430935554  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
        send_message = await bot.send_message(GROUP_ID, group_message, parse_mode='Markdown', disable_web_page_preview=True)
        await insert_message_id(transaction.id,send_message.message_id)


        for admin_id in ADMIN:
            await bot.send_message(admin_id, message_text)
    else:
        amount = value - user.balance
        await callback.answer(f'–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ—â–µ {amount}‚≠ê, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!',show_alert=True)



@user.callback_query(F.data == 'void')
async def fail_callback(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")
    await callback.message.delete()


#TEST
###########################################################################################################################
###########################################################################################################################
###########################################################################################################################



@user.message(F.text == ("test"))
async def check_admin_handler(message: Message, bot: Bot):
    text = await get_config('start_text')
    
    if text is None:
        await message.answer("‚ö†Ô∏è –í –ë–î –Ω–µ—Ç start_text!", parse_mode='Markdown')
    else:
        await message.answer(f"üîπ –í–æ—Ç —á—Ç–æ –ª–µ–∂–∏—Ç –≤ –ë–î:\n\n{text}", parse_mode='Markdown')




@user.chat_join_request()
async def handle_join_request(update: types.ChatJoinRequest):
    user_id = update.from_user.id
    chat_id = update.chat.id
    task = await get_task_state(user_id)
    object = await get_task_about_taskid(task.task_id)
    check_history = await check_entry_task_history(user_id,object.id)
    if check_history:
        await create_task_history(user_id,object.id,chat_id)
        completed = await completed_task(object.id,user_id,object.reward)
        await update.bot.send_message(chat_id=user_id, text=f'FIND TASK ID:{task.task_id}') 
        #complete = await join_request(user_id, chat_id)
        complete_text = (
                    f'*‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{object.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n'
                    f'*‚Ä¢ {object.reward}‚≠êÔ∏è –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ, –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π, –∏–Ω–∞—á–µ –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã!!*'
                )
        await update.bot.send_message(chat_id=user_id, text=complete_text,parse_mode='Markdown',reply_markup=kb.next_task_inline)
    elif not check_history:
        await update.bot.send_message(chat_id=user_id,text = '*–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ*',parse_mode='Markdown',reply_markup=kb.next_task_inline)
    if completed:
            message_text = (f'üéØ*–ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º  ‚Ññ*{object.id} *–∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É*\n\n'
                            f'‚Ä¢ *–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ:* [{object.link}]({object.link})\n'
                            f'‚Ä¢ *–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:* {object.completed_count+1}')
            for admin_id in ADMIN:
                await update.bot.send_message(admin_id, message_text,parse_mode='Markdown', disable_web_page_preview=True)


        



#@user.message(F.forward_from_chat)
async def testter(message:Message):
    if message.forward_from_chat:
            chat_title = message.forward_from_chat.title
            await message.answer(chat_title)