from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.states import Date
from app.database.requests import get_today_users, get_all_users, get_all_users_date,get_top_referrers_by_date
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN
from datetime import datetime

admin = Router()


class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(),F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def statistics_handler(message: Message, state: FSMContext):
    await state.clear()
    users = await get_today_users()
    all_users = await get_all_users()
    
    total_users = len(users)
    total_all_users = len(all_users)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await message.answer(
        f"üìä –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_all_users}\n"
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {total_users}",
        reply_markup=kb.stat_edit
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for user in users:
        username = user.username if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        referrer_id = user.referrer_id if user.referrer_id else "–ù–µ—Ç"
        
        user_info = (
            f"üë§ Username: `{username}`\n"
            f"üÜî Telegram ID: {user.tg_id}\n"
            f"üì≤ Referrer ID: {referrer_id}\n"
            f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {user.referral_count}"
        )
        
        await message.answer(user_info,parse_mode='Markdown')

@admin.callback_query(Admin(), F.data.startswith('NumDate_'))
async def num_date_handler(callback: CallbackQuery, state: FSMContext):
    type = callback.data.removeprefix("NumDate_")
    await state.update_data(type=type) 
    today_date = datetime.now().strftime('%d-%m-%Y')
    
    text = (
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–¥–¥-–º–º-–≥–≥–≥–≥*\n"
        f"üìå –ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: `{today_date}`"
    )
    
    await callback.message.answer(text, parse_mode='Markdown')
    await state.set_state(Date.first_date)
    await callback.answer()


@admin.message(Date.first_date)
async def process_first_date_handler(message: Message, state: FSMContext):
    date_1 = message.text.strip()
    today_date = datetime.now().strftime('%d-%m-%Y')
    await state.update_data(date_1=date_1)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏    today_date = datetime.now().strftime('%d-%m-%Y')

    text = (
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–¥–¥-–º–º-–≥–≥–≥–≥*\n"
        f"üìå –ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: `{today_date}`"
    )
    await message.answer(text,parse_mode='Markdown')
    await state.set_state(Date.second_date)


@admin.message(Date.second_date)
async def process_second_date_handler(message:Message,state: FSMContext):
    date_2 = message.text.strip()
    await state.update_data(date_2=date_2)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    date_1 = data.get("date_1")
    type = data.get("type")
    # –û—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        f"‚úÖ –í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—ã:\n\n"
        f"üìÖ –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞: `{date_1}`\n"
        f"üìÖ –í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞: `{date_2}`",
        parse_mode='Markdown'
    )
    #users = await get_all_users()
    if type == 'reg':
        users = await get_all_users_date(date_1, date_2)
        for user in users:
            username = user.username if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
            referrer_id = user.referrer_id if user.referrer_id else "–ù–µ—Ç"
            
            user_info = (
                f"üë§ Username: @{username}\n"
                f"üÜî Telegram ID: {user.tg_id}\n"
                f"üì≤ Referrer ID: {referrer_id}\n"
                f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {user.referral_count}"
            )
            
            await message.answer(user_info, parse_mode='Markdown')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    elif type == 'ref':
        result = await get_top_referrers_by_date(date_1, date_2)
        response_text = f"üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤ —Å {date_1.replace('-', '.')} –ø–æ {date_2.replace('-', '.')}:\n\n"
        
        if result:
            for row in result:
                display_name = f"@{row[1]}" if row[1] else f"ID: {row[0]}"
                response_text += f"{display_name} ‚Äî {row[2]} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
        else:
            response_text += "–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —ç—Ç–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ."

        await message.answer(response_text)
    await state.clear()


