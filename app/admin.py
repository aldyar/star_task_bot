from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.states import CreateTask, EditTask
import re
from app.database.requests import get_all_tasks, get_task, edit_task_reward, edit_task_active, edit_task_total_completion, create_task,get_task_about_taskid
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,InlineKeyboardMarkup, InlineKeyboardButton
from app.database.models import User, Config, Task, TaskCompletion
from app.database.models import async_session
from config import ADMIN
from aiogram.utils.text_decorations import html_decoration

admin = Router()


class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(), CommandStart())
async def start_admin(message: Message,state:FSMContext):
    await state.clear()
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',reply_markup = kb.main_admin)


@admin.message(Admin(),F.text == '–ó–∞–¥–∞–Ω–∏–µ')
async def tasks (message: Message,state:FSMContext):
    await state.clear()
    text = """
üìã *–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* 
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è–º–∏.  

‚ú® *–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è* –∏–ª–∏ üîÑ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ* ‚Äî –≤—Å—ë –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö!  

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ‚¨áÔ∏è
"""
    await message.answer(text, parse_mode='Markdown', reply_markup=kb.tasks_menu)


@admin.callback_query(F.data == 'create_task')
async def create_task_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üìå–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è ',reply_markup=kb.inline_task_type)
    await callback.answer()

@admin.callback_query(F.data.in_({'subscribe', 'entry'}))
async def task_type_process(callback: CallbackQuery, state: FSMContext):
    task_type = callback.data 
    await state.update_data(task_type=task_type)
    await callback.message.answer(
        "üìå –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/...`", parse_mode='Markdown', disable_web_page_preview=True
    )
    await state.set_state(CreateTask.waiting_for_link)
    await callback.answer()

@admin.message(CreateTask.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    link = message.text.strip()
    await state.update_data(link=link)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown...',reply_markup=kb.describe_inline)
    await state.set_state(CreateTask.waiting_for_description)


@admin.message(CreateTask.waiting_for_description)
async def process_describe(message:Message,state:FSMContext):
    describe = html_decoration.unparse(message.text, message.entities)
    await state.update_data(describe = describe)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤ —Ü–∏—Ñ—Ä–∞—Ö):")
    await state.set_state(CreateTask.waiting_for_reward)



@admin.callback_query(F.data == 'describe_none')
async def describe_none_handler(callback:CallbackQuery,state:FSMContext):
    await callback.message.delete()
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤ —Ü–∏—Ñ—Ä–∞—Ö):")
    await state.set_state(CreateTask.waiting_for_reward)



@admin.message(CreateTask.waiting_for_reward)
async def process_reward(message: Message, state: FSMContext):
    try:
        reward = float(message.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ —á–∏—Å–ª–∞: —Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(reward=reward)
    await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–≤ —Ü–∏—Ñ—Ä–∞—Ö):")
    await state.set_state(CreateTask.waiting_for_count)



@admin.message(CreateTask.waiting_for_count)
async def process_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —á–∏—Å–ª–æ–º.")
        return
    
    await state.update_data(count=int(message.text))
    await message.answer('üì® –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω–æ–π –∫–∞–Ω–∞–ª–∞:')
    await state.set_state(CreateTask.waiting_fot_chat_id)
    

@admin.message(CreateTask.waiting_fot_chat_id)
async def process_chat_id(message: Message, state: FSMContext):
    if message.forward_from_chat:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        chat_id = message.forward_from_chat.id
        title =  message.forward_from_chat.title
        await message.answer(f"Chat ID —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: `{chat_id}`", parse_mode="Markdown")
        data = await state.get_data()
        link = data['link'] 
        reward = data['reward']
        count = data['count']
        task_type = data['task_type']
        describe = data.get('describe')
        print(f'link: {link}, reward: {reward}, count: {count}')
        await create_task(link, reward, count, chat_id,title, task_type, describe)

        text = f"""
    ‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>
    üìå <b>–°—Å—ã–ª–∫–∞:</b> <a href="{link}">{link}</a>
    üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward}
    üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:</b> {count}
    ‚úâÔ∏è <b>ID –∫–∞–Ω–∞–ª–∞:</b> {chat_id}
"""

        if describe:
            await message.answer(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {describe}", parse_mode='HTML')
        await message.answer(text, parse_mode='HTML', disable_web_page_preview=True)
        await state.clear()
        
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")



@admin.callback_query(F.data == 'edit_task')
async def show_tasks(callback: CallbackQuery):
    tasks = await get_all_tasks()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
    if not tasks:
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        await callback.answer()
        return

    for task in tasks:
        text = f"üî¢ <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}</b>\n\n"
        if task.description:
            text +=f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n"
        text +=f'üìå <b>–°—Å—ã–ª–∫–∞:</b> <a href="{task.link}">{task.link}</a>\n'
        text +=f'üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {task.reward}‚≠ê\n'
        text +=f'üìä <b>–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:</b> {task.total_completions}\n'
        text +=f'‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {task.completed_count}'

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'editindividualtask_{task.id}')]
            ]
        )
        await callback.message.answer(text, parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)
    await callback.answer()



@admin.callback_query(F.data.startswith('editindividualtask_'))
async def edit_task(callback:CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[1])
    task = await get_task_about_taskid(task_id)

    if not task:
        await callback.message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    await state.update_data(task_id=task_id)

    text = f"""
üìå **–°—Å—ã–ª–∫–∞:** [{task.link}]({task.link})
üí∞ **–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:** {task.reward}
üìä **–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:** {task.total_completions}
‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** {task.completed_count}
"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', callback_data=f'change_reward_{task_id}')],
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π', callback_data=f'add_completions_{task_id}')],
            [InlineKeyboardButton(text='üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'deactivate_{task_id}')]
        ]
    )

    await callback.message.answer(text, parse_mode='Markdown', reply_markup=keyboard, disable_web_page_preview=True)
    await callback.answer()


@admin.callback_query(F.data.startswith('change_reward_'))
async def change_reward(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[-1])
    await state.update_data(task_id=task_id)
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (—á–∏—Å–ª–æ–º):")
    await state.set_state(EditTask.changing_reward)
    await callback.answer()


@admin.message(EditTask.changing_reward)
async def process_change_reward(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    task_id = data['task_id']
    task = await get_task_about_taskid(task_id)

    if task:
        await edit_task_reward(task_id, int(message.text))
        await message.answer("‚úÖ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


@admin.callback_query(F.data.startswith('add_completions_'))
async def add_completions(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[-1])
    await state.update_data(task_id=task_id)
    await callback.message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:")
    await state.set_state(EditTask.adding_completions)
    await callback.answer()


@admin.message(EditTask.adding_completions)
async def process_add_completions(message: Message, state: FSMContext, ):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    task_id = data['task_id']
    task = await get_task_about_taskid(task_id)

    if task:
        await edit_task_total_completion(task_id, int(message.text))
        await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


@admin.callback_query(F.data.startswith('deactivate_'))
async def deactivate_task(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[-1])
    task = await get_task_about_taskid(task_id)

    if task:
        await edit_task_active(task_id)
        await callback.message.answer("üö´ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        await callback.message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await callback.answer()
