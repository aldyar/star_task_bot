from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.states import EditLimit
from database.requests import edit_withdraw_limit, get_pending_transactions, complete_transaction, get_transaction
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN, GROUP_ID
from aiogram import Bot
import asyncio
from aiogram.utils.text_decorations import markdown_decoration as md


admin = Router()


class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(), F.text == '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤')
async def withdraw_hander(message: Message,state:FSMContext):
    await state.clear()
    text = ('*–í —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞ ‚≠êÔ∏è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥*')
    await message.answer(text, parse_mode='Markdown', reply_markup=kb.withdraw_menu_admin)


@admin.callback_query(Admin(), F.data == 'editwithdraw_limit')
async def edit_withdraw_limit_handler(callback: CallbackQuery):
    keyboard = await kb.withdraw_edit_req()
    await callback.message.delete()
    await callback.message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å*',parse_mode='Markdown',reply_markup=keyboard)


@admin.callback_query(Admin(), F.data.startswith('editlimit_'))
async def edit_limit_handler(callback: CallbackQuery, state: FSMContext):
    value = int(callback.data.split('_')[1])
    column_mapping = [
    'withdraw_1',
    'withdraw_2',
    'withdraw_3',
    'withdraw_4',
    'withdraw_5',
    'withdraw_6',
    'withdraw_7',
]
    column_name = column_mapping[value - 1]
    await state.update_data(column_name=column_name, current_value=value)

    await callback.message.answer('‚úèÔ∏è*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:*')
    await callback.message.delete()
    await state.set_state(EditLimit.edit_withdraw_limit)


@admin.message(EditLimit.edit_withdraw_limit)
async def process_edit_limit_handler(message:Message, state: FSMContext):
    try:
        new_value = int(message.text)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    except ValueError:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
        return

    data = await state.get_data()
    column_name = data.get('column_name')
    
    if not column_name:
        await message.answer('‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É.')
        return

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É ORM —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    await edit_withdraw_limit(column_name=column_name, new_value=new_value)

    await message.answer(f'‚úÖ –õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_value}‚≠êÔ∏è.')
    await state.clear()

    keyboard = await kb.withdraw_edit_req()
    await message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å*',
        parse_mode='Markdown',
        reply_markup=keyboard
    )




@admin.callback_query(Admin(), F.data == 'withdraw_req')
async def withdraw_req_handler(callback: CallbackQuery):
    withdrawals = await get_pending_transactions()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –±–∞–∑—ã)

    if not withdrawals:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.")
        await callback.answer()
        return

    for withdrawal in withdrawals:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_withdraw_{withdrawal.id}")]
            ]
        )

        message_text = (
            f"üìå *–ó–∞—è–≤–∫–∞ ‚Ññ{withdrawal.id}*\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {md.quote('@' + (withdrawal.username or '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n"
            f"üÜî *TG ID:* `{withdrawal.tg_id}`\n"
            f"üåç *GEO:* {withdrawal.user_lang}\n"
            f"üí∞ *–°—É–º–º–∞:* `{withdrawal.amount} ‚≠êÔ∏è`\n"
            f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫:* {withdrawal.emoji}\n"
            f"‚è≥ *–°—Ç–∞—Ç—É—Å:* _–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_"
        )

        await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="Markdown")
        await asyncio.sleep(0.3)  # –∑–∞—â–∏—Ç–∞ –æ—Ç FloodWait

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback


@admin.callback_query(Admin(), F.data.startswith("complete_withdraw_"))
async def complete_withdraw(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    withdraw_id = int(callback.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏
    print(f'VASH IIIIIID:{withdraw_id}')
    success = await complete_transaction(withdraw_id)  # –û—Ç–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –≤ –ë–î
    transaction = await get_transaction(withdraw_id)
    if success:
        await bot.send_message(
            GROUP_ID,
            f"*‚úÖ #–ó–∞—è–≤–∫–∞_{transaction.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ {transaction.amount}‚≠êÔ∏è({transaction.emoji}).*\n\n"
            '*–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: @FreeStard_bot*',
            reply_to_message_id=transaction.message_id, parse_mode='Markdown'
        )
        await callback.message.delete()
        updated_text = (
            f"üìå *–ó–∞—è–≤–∫–∞ ‚Ññ{transaction.id}*\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{transaction.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
            f"üÜî *TG ID:* `{transaction.tg_id}`\n"
            f"üí∞ *–°—É–º–º–∞:* `{transaction.amount} ‚≠êÔ∏è`\n"
            f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        )
        await callback.message.answer(updated_text, parse_mode="Markdown")
        await callback.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ‚úÖ")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", show_alert=True)
