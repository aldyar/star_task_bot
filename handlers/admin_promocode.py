from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.states import Promocode
from function.promocode_req import PromocodeFunction

admin = Router()



@admin.callback_query(F.data == 'Promocode')
async def admin_promocode(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö\n\n"
        "_–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:_",
        reply_markup=kb.promocode_menu_inline,
        parse_mode="Markdown"
    )


@admin.callback_query(F.data == 'PromoList')
async def show_promocodes(callback: CallbackQuery,state:FSMContext):
    await callback.answer()
    await state.clear()
    promocodes = await PromocodeFunction.get_promocode()

    active = []
    inactive = []

    for promo in promocodes:
        if promo.use_count < promo.total_count:
            active.append(promo)
        else:
            inactive.append(promo)

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if active:
        for promo in active:
            await callback.message.answer(
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {promo.name}\n"
                f"*–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo.code}`\n"
                f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* {promo.use_count} / {promo.total_count}\n"
                f"*–ù–∞–≥—Ä–∞–¥–∞:* {promo.reward}",
                parse_mode='Markdown'
            )
    else:
        await callback.message.answer("*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.*", parse_mode='Markdown')

    # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ‚Äî —Å–ø–∏—Å–∫–æ–º
    if inactive:
        text = "*–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n\n"
        for promo in inactive:
            text += f"üîí *{promo.name}* (`{promo.code}`) ‚Äî {promo.use_count}/{promo.total_count}\n"
        await callback.message.answer(text, parse_mode='Markdown')
    else:
        await callback.message.answer("*–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.*", parse_mode='Markdown')



@admin.callback_query(F.data == 'CreatePromocode')
async def create_promocode(callback:CallbackQuery,state:FSMContext):
    await callback.answer()
    await callback.message.answer(
        "*–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:*\n\n"
        "*–ù–∞–∑–≤–∞–Ω–∏–µ\n–ü—Ä–æ–º–æ–∫–æ–¥\n–ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n–ù–∞–≥—Ä–∞–¥–∞*\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n_–õ–µ—Ç–Ω–∏–π –±–æ–Ω—É—Å\nSUMMER2025\n10\n50_",
        parse_mode='Markdown'
    )
    await state.set_state(Promocode.create_promo)


@admin.message(Promocode.create_promo)
async def create_promocode_handler(message: Message, state: FSMContext):
    lines = message.text.strip().split("\n")

    if len(lines) != 4:
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏*:\n"
            "*–ù–∞–∑–≤–∞–Ω–∏–µ\n–ü—Ä–æ–º–æ–∫–æ–¥\n–ö–æ–ª-–≤–æ\n–ù–∞–≥—Ä–∞–¥–∞*\n\n"
            "*–ü—Ä–∏–º–µ—Ä:*\n_–õ–µ—Ç–Ω–∏–π –±–æ–Ω—É—Å\nSUMMER2025\n10\n50_",
            parse_mode='Markdown'
        )
        return

    name, promocode, count_str, reward_str = lines

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
    try:
        count = int(count_str)
        reward = int(reward_str)
    except ValueError:
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞: –ö–æ–ª-–≤–æ –∏ –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏*.\n"
            "*–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ —à–∞–±–ª–æ–Ω—É:*\n\n"
            "*–ü—Ä–∏–º–µ—Ä:*\n_–õ–µ—Ç–Ω–∏–π –±–æ–Ω—É—Å\nSUMMER2025\n10\n50_",
            parse_mode='Markdown'
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await PromocodeFunction.create_promocode(name=name, promocode=promocode, count=count, reward=reward)

    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await state.clear()


@admin.callback_query(F.data =='DeletePromocode')
async def delete_promocode(callback:CallbackQuery,state:FSMContext):
    await callback.answer()
    await callback.message.answer("*–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:*",parse_mode='Markdown')
    await state.set_state(Promocode.delete_promo)


@admin.message(Promocode.delete_promo)
async def process_delete_promocode(message: Message, state: FSMContext):
    promo_code_text = message.text.strip()

    promocode = await PromocodeFunction.delete_promocode(promo_code_text)

    if promocode:
        await message.answer(f"*–ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code_text}` *—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω* ‚úÖ",parse_mode='Markdown')
    else:
        await message.answer(f"*–ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code_text}` *–Ω–µ –Ω–∞–π–¥–µ–Ω* ‚ùå",parse_mode='Markdown')

    await state.clear()