from database.models import async_session
from database.models import User, Config, Task, TaskCompletion, Transaction,TaskHistory,TaskState, Event
from sqlalchemy import select, update, delete, desc
from decimal import Decimal
from datetime import datetime, timedelta
import text as txt
from sqlalchemy import and_,func,not_
from aiogram import Bot
from aiogram.types import ChatMember
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.sql import exists
from config import ADMIN

def connection(func):
    async def inner(*args, **kwargs):
        async with async_session() as session:
            return await func(session, *args, **kwargs)
    return inner

class EventFunction:
    
    @connection
    async def create_event(session,c1,c2,c3,c4,c5,c6,type,rule,text,image,end_date):
        now = datetime.now()
        new_event = Event(
            c1 = c1,
            c2 = c2,
            c3 = c3 if c3 is not None else None,
            c4 = c4 if c4 is not None else None,
            c5 = c5 if c5 is not None else None,
            c6 = c6 if c6 is not None else None,
            rules = rule,
            type = type,
            text = text,
            image = image,
            end_date = end_date,
            start_date = now
        )
        session.add(new_event)
        await session.commit()


    @connection
    async def create_event_4(session,c1,c2,rule,text,image,end_date):
        new_event = Event(
            c1 = c1,
            c2 = c2,
            rules = rule,
            text = text,
            image = image,
            end_date = end_date
        )
        session.add(new_event)
        await session.commit()

    @connection
    async def check_active_event(session):
        event = await session.scalars(select(Event).where(Event.active == True))
        return event.first() is not None

    @connection
    async def get_active_event(session):
        event = await session.scalar(select(Event).where(Event.active == True))
        return event
    
    @connection
    async def check_user_referrals_in_event(session, tg_id) -> bool:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        event = await EventFunction.get_active_event()
        result = await session.execute(
            select(User).where(User.tg_id == tg_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            return False

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–∏–æ–¥ —Å–æ–±—ã—Ç–∏—è
        result = await session.execute(
            select(func.count(User.tg_id)).where(
                User.referrer_id == user.tg_id,
                User.register_date >= event.start_date,
                User.register_date <= event.end_date
            )
        )
        referral_count = result.scalar()
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.tg_id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥ —Å {event.start_date} –ø–æ {event.end_date}")
        print(f"[DEBUG] –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª—É: {event.rules or 0}")  
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª–æ–º
        return referral_count >= (event.rules or 0)


    @connection
    async def add_participant_to_event(session, tg_id,bot) -> bool:
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = await EventFunction.get_active_event()

        if not event:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        current_participants = event.participants.split(",") if event.participants else []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        str_user_id = str(tg_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if str_user_id in current_participants:
            return True

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        current_participants.append(str_user_id)
        updated_participants = ",".join(current_participants)
        await bot.send_message(tg_id,"üéâ*–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ*" , parse_mode="Markdown")
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        await session.execute(
            update(Event)
            .where(Event.id == event.id)
            .values(participants=updated_participants)
        )
        await session.commit()
        return True
    
    @connection
    async def save_message_id(session,message_id):
        event = await session.scalar(select(Event).where(Event.active == True))

        if event:
            event.message_id = message_id
            await session.commit()

    @connection
    async def check_and_close_expired_events(session,bot:Bot):
        now = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à—ë–ª end_date
        result = await session.execute(
            select(Event).where(
                Event.active == True,
                Event.end_date < now
            )
        )
        expired_events = result.scalars().all()

        for event in expired_events:
            event.active = False
            # –ú–æ–∂–µ—à—å —Ç—É—Ç –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤ –ª–æ–≥
            for admin in ADMIN:
                await bot.send_message(
                admin,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                f"–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! \nID –ö–æ–Ω–∫—É—Ä—Å–∞: {event.id}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {event.end_date}\n\n–û–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω."
            )
            await EventFunction.end_event_and_reward_users(bot,event.id)
        if expired_events:
            await session.commit()


    @connection
    async def delete_event(session,event_id):
        event = await session.scalar(select(Event).where(Event.id ==event_id))
        if event:
            await session.delete(event)
            await session.commit()

    @connection
    async def end_event_and_reward_users(session, bot: Bot, event_id: int):
        print(f"[1] –°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è event_id: {event_id}")
        event = await session.scalar(select(Event).where(Event.id == event_id))
        if not event:
            print(f"[2] Event —Å id={event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        print(f"[3] Event –Ω–∞–π–¥–µ–Ω: {event}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if not event.participants:
            return

        print(f"[5] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.participants}")
        participants_ids = list(map(int, event.participants.split(",")))
        users = await session.execute(
            select(User).where(User.tg_id.in_(participants_ids))
        )
        users = users.scalars().all()
        print(f"[6] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ª—é–¥–µ–π –≤ –ø–µ—Ä–∏–æ–¥ –∫–æ–Ω–∫—É—Ä—Å–∞
        user_stats = []
        for user in users:
            invited = await session.execute(
                select(User).where(
                    (User.referrer_id == user.tg_id) &
                    (User.register_date >= event.start_date) &
                    (User.register_date <= event.end_date)
                )
            )
            invited_list = invited.scalars().all()
            referral_count = len(invited_list)
            user_stats.append((user, referral_count))

        print(f"[7] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–∏–æ–¥ –∫–æ–Ω–∫—É—Ä—Å–∞: {[f'{u.username or u.tg_id}: {c}' for u, c in user_stats]}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        user_stats.sort(key=lambda x: x[1], reverse=True)
        print(f"[8] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —á–∏—Å–ª—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.")

        users = [u for u, _ in user_stats]
        ref_counts = [c for _, c in user_stats]

        print(f"[9] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –ø–æ —Ç–∏–ø—É: {event.type}")

        if event.type == "1":
            prizes = [event.c1, event.c2, event.c3] + [event.c4] * 17 + [event.c5] * 30 + [event.c6] * 50
        elif event.type == "2":
            prizes = [event.c1, event.c2, event.c3] + [event.c4] * 37 + [event.c5] * 60 + [event.c6] * 100
        elif event.type == "3":
            prizes = [event.c1, event.c2, event.c3] + [event.c4] * 97 + [event.c5] * 200 + [event.c6] * 200
        elif event.type == "4":
            prizes = [event.c1] * event.c2
        else:
            print(f"[10] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞: {event.type}")
            return

        print(f"[11] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {len(prizes)}")

        winners = []
        for i, user in enumerate(users[:len(prizes)]):
            prize = prizes[i]
            user.balance += prize
            winners.append(f"{i+1} –º–µ—Å—Ç–æ ‚Äî @{user.username or user.tg_id} ‚Äî +{prize}‚≠êÔ∏è, –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {ref_counts[i]}")
            print(f"[12] –ü—Ä–∏—Å—É–∂–¥—ë–Ω –ø—Ä–∏–∑ {prize} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}")

            try:
                await bot.send_message(user.tg_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ {i+1} –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ‚≠êÔ∏è{prize}.")
                print(f"[13] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}")
            except Exception as e:
                print(f"[14] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}: {e}")

        await session.commit()
        print(f"[15] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∫–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        winner_text = "üèÜ –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n" + "\n".join(winners)
        for admin in ADMIN:
            await bot.send_message(admin, winner_text)
            print(f"[16] –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É.")


    @connection
    async def check_active_event_by_id(session,event_id):
        event = await session.scalar(select(Event).where(Event.id == event_id))
        if event:
            return event.active


    # @connection
    # async def end_event_and_reward_users(session, bot: Bot, event_id: int):
    #     print(f"[1] –°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è event_id: {event_id}")
    #     event = await session.scalar(select(Event).where(Event.id == event_id))
    #     if not event:
    #         print(f"[2] Event —Å id={event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    #         return

    #     print(f"[3] Event –Ω–∞–π–¥–µ–Ω: {event}")

    #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    #     if not event.participants:
    #         return


    #     print(f"[5] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.participants}")
    #     participants_ids = list(map(int, event.participants.split(",")))
    #     users = await session.execute(
    #         select(User).where(User.tg_id.in_(participants_ids))
    #     )
    #     users = users.scalars().all()

    #     print(f"[6] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    #     # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥ –∫–æ–Ω–∫—É—Ä—Å–∞
    #     users = [u for u in users if event.start_date <= u.register_date <= event.end_date]
    #     print(f"[7] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(users)}")
    #     # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (referral_count)
    #     users.sort(key=lambda x: x.referral_count, reverse=True)
    #     print(f"[8] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.")
    #     winners = []


    #     print(f"[9] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –ø–æ —Ç–∏–ø—É: {event.type}")

    #     if event.type == "1":
    #         prizes = [event.c1, event.c2, event.c3] + [event.c4] * 17 + [event.c5] * 30 + [event.c6] * 50
    #     elif event.type == "2":
    #         prizes = [event.c1, event.c2, event.c3] + [event.c4] * 37 + [event.c5] * 60 + [event.c6] * 100
    #     elif event.type == "3":
    #         prizes = [event.c1, event.c2, event.c3] + [event.c4] * 97 + [event.c5] * 200 + [event.c6] * 200
    #     elif event.type == "4":
    #         prizes = [event.c1] * event.c2
    #     else:
    #         print(f"[10] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞: {event.type}")
    #         return


    #     print(f"[11] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {len(prizes)}")

    #     for i, user in enumerate(users[:len(prizes)]):
    #         prize = prizes[i]
    #         user.balance += prize
    #         winners.append(f"{i+1} –º–µ—Å—Ç–æ ‚Äî @{user.username or user.tg_id} ‚Äî +{prize}‚Ç∏, –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {user.referral_count}")
    #         print(f"[12] –ü—Ä–∏—Å—É–∂–¥—ë–Ω –ø—Ä–∏–∑ {prize} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}")

    #         try:
    #             await bot.send_message(user.tg_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ {i+1} –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ {prize}.")
    #             print(f"[13] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}")
    #         except Exception as e:
    #             print(f"[14] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username or user.tg_id}: {e}")

    #     await session.commit()


    #     print(f"[15] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∫–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    #     winner_text = "üèÜ –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n" + "\n".join(winners)
    #     await bot.send_message(1075213318, winner_text)
    #     print(f"[16] –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É.")
